.. _cpp_face_pad_example:

C++ Face Pad Example
^^^^^^^^^^^^^^^^^^^^

.. only:: face_pad_rgb

    C++ PadRGB Example
    """"""""""""""""""

    Initialize pad RGB model

    .. code-block:: c++

        oneML::face::FacePad pad_rgb(oneML::face::PadType::Rgb);

    Initialize pad RGB model with licensing

    .. code-block:: c++

        oneML::LicenseManager license_manager;
        license_manager.set_key("LICENSE_KEY_VALUE_HERE");
        license_manager.activate_key();
        oneML::face::FacePad pad_rgb(oneML::face::PadType::Rgb, license_manager);

    Initialize oneML's Utils

    .. code-block:: c++
    
        oneML::Utils utils;
    
    Initialize oneML's Utils with licensing
    
    .. code-block:: c++
    
        oneML::Utils utils(license_manager);

    Create oneML's MultiImage input and outputs object

    .. code-block:: c++

        oneML::MultiImage inputs{img1, img2, ...  img4};
        std::vector<oneML::face::FacePadResult> outputs;

    Create oneML's Image input and output object

    .. code-block:: c++
    
        oneML::Image img;
        utils.read_image_cv(path, img);
        oneML::face::FacePadResult output;

    Run the model

    .. code-block:: c++

        pad_rgb.classify(inputs, outputs);

    or

    .. code-block:: c++
    
        pad_rgb.classify(img, output);

.. only:: face_pad_paper

    C++ PadPaper Example
    """"""""""""""""""""

    Initialize pad paper model

    .. code-block:: c++

        oneML::face::FacePad pad_paper(oneML::face::PadType::Paper);

    Initialize pad paper model with licensing

    .. code-block:: c++

        oneML::LicenseManager license_manager;
        license_manager.set_key("LICENSE_KEY_VALUE_HERE");
        license_manager.activate_key();
        oneML::face::FacePad pad_paper(oneML::face::PadType::Paper, license_manager);

    Initialize oneML's Utils

    .. code-block:: c++
    
        oneML::Utils utils;
    
    Initialize oneML's Utils with licensing
    
    .. code-block:: c++
    
        oneML::Utils utils(license_manager);

    Create oneML's MultiImage input and outputs object

    .. code-block:: c++

        oneML::MultiImage inputs{img1, img2, ...  img4};
        std::vector<oneML::face::FacePadResult> outputs;

    Create oneML's Image input and output object

    .. code-block:: c++
    
        oneML::Image img;
        utils.read_image_cv(path, img);
        oneML::face::FacePadResult output;

    Run the model

    .. code-block:: c++

        pad_paper.classify(inputs, outputs);

    or

    .. code-block:: c++
    
        pad_paper.classify(img, output);

.. only:: face_pad_ir

    C++ PadIr Example
    """""""""""""""""

    Initialize pad IR model

    .. code-block:: c++

        oneML::face::FacePad pad_ir(oneML::face::PadType::Ir);

    Initialize pad IR model with licensing

    .. code-block:: c++

        oneML::LicenseManager license_manager;
        license_manager.set_key("LICENSE_KEY_VALUE_HERE");
        license_manager.activate_key();
        oneML::face::FacePad pad_ir(oneML::face::PadType::Ir, license_manager);

    Initialize oneML's Utils

    .. code-block:: c++
    
        oneML::Utils utils;
    
    Initialize oneML's Utils with licensing
    
    .. code-block:: c++
    
        oneML::Utils utils(license_manager);
        
    Create oneML's MultiImage input and outputs object

    .. code-block:: c++

        oneML::MultiImage inputs{img1, img2, ...  img4};
        std::vector<oneML::face::FacePadResult> outputs;

    Create oneML's Image input and output object

    .. code-block:: c++
    
        oneML::Image img;
        utils.read_image_cv(path, img);
        oneML::face::FacePadResult output;
    

    Run the model

    .. code-block:: c++

        pad_ir.classify(inputs, outputs);

    or

    .. code-block:: c++
    
        pad_ir.classify(img, output);
